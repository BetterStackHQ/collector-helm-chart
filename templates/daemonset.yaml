{{- include "better-stack-collector.validateValues" . }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ include "better-stack-collector.fullname" . }}
  labels:
    {{- include "better-stack-collector.labels" . | nindent 4 }}
    app.kubernetes.io/component: better-stack-collector
spec:
  selector:
    matchLabels:
      {{- include "better-stack-collector.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      labels:
        {{- include "better-stack-collector.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "better-stack-collector.serviceAccountName" . }}
      hostPID: true
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
      # Collector container (non-privileged)
      - name: collector
        image: "{{ .Values.collector.image.repository }}:{{ .Values.collector.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.collector.image.pullPolicy }}
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
          privileged: false
        env:
        {{- range $key, $value := .Values.collector.env }}
        {{- if $value }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        {{- end }}
        # System environment variables from Kubernetes downward API
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: COLLECTOR_NAME
          value: {{ include "better-stack-collector.fullname" . }}
        - name: CONTAINER_NAME
          value: "collector"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: PROCFS_ROOT
          value: "/host/proc"
        - name: SYSFS_ROOT
          value: "/host/sys"
        ports:
        - name: otlp
          containerPort: {{ .Values.collector.otlpPort }}
          hostPort: {{ .Values.collector.otlpPort }}
          protocol: TCP
        livenessProbe:
          exec:
            command:
            - /healthcheck.sh
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        volumeMounts:
        {{- if and .Values.beyla.enabled .Values.beyla.dockerprobe.enabled }}
        - name: docker-metadata
          mountPath: {{ .Values.volumes.dockerMetadata.mountPath }}
        {{- end }}
        - name: cgroup
          mountPath: /sys/fs/cgroup
          readOnly: true
        - name: varlog-pods
          mountPath: /var/log/pods
          readOnly: true
        - name: docker-containers
          mountPath: /var/lib/docker/containers
          readOnly: true
        {{- if .Values.collector.hostMounts.paths }}
        {{- range $index, $path := .Values.collector.hostMounts.paths }}
        - name: hostfs-{{ $index }}
          mountPath: /host{{ $path }}
          readOnly: true
        {{- end }}
        {{- else }}
        - name: hostfs
          mountPath: /host
          readOnly: true
        {{- end }}
        resources:
          {{- toYaml .Values.collector.resources | nindent 10 }}
      {{- if .Values.beyla.enabled }}
      # Beyla container (privileged)
      - name: beyla
        image: "{{ .Values.beyla.image.repository }}:{{ .Values.beyla.image.tag }}"
        imagePullPolicy: {{ .Values.beyla.image.pullPolicy }}
        securityContext:
          {{- toYaml .Values.securityContext.beyla | nindent 10 }}
        env:
        {{- range $key, $value := .Values.beyla.env }}
        {{- if $value }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        {{- end }}
        # System environment variables from Kubernetes downward API
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: COLLECTOR_NAME
          value: {{ include "better-stack-collector.fullname" . }}
        - name: CONTAINER_NAME
          value: "beyla"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        # Special configuration (these need dynamic template values)
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "http://localhost:{{ .Values.collector.otlpPort }}"
        - name: ENABLE_DOCKERPROBE
          value: {{ .Values.beyla.dockerprobe.enabled | quote }}
        {{- if .Values.beyla.memoryRestartThreshold }}
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - |
              BEYLA_PID=$(pgrep -f '^/usr/local/bin/beyla' | head -1)
              if [ -z "$BEYLA_PID" ]; then
                echo "Beyla process not found"
                exit 1
              fi
              MEM_USAGE=$(cat /proc/$BEYLA_PID/status | grep VmRSS | awk '{print int($2/1024)}')
              THRESHOLD={{ .Values.beyla.memoryRestartThreshold }}
              if [ "$MEM_USAGE" -gt "$THRESHOLD" ]; then
                echo "Beyla memory usage ${MEM_USAGE}MiB exceeds threshold ${THRESHOLD}MiB"
                exit 1
              fi
              exit 0
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        {{- end }}
        volumeMounts:
        {{- if .Values.beyla.dockerprobe.enabled }}
        - name: docker-metadata
          mountPath: {{ .Values.volumes.dockerMetadata.mountPath }}
        {{- end }}
        - name: sys-kernel-tracing
          mountPath: /sys/kernel/tracing
        - name: sys-kernel-debug
          mountPath: /sys/kernel/debug
        - name: sys-kernel-security
          mountPath: /sys/kernel/security
          readOnly: true
        resources:
          {{- toYaml .Values.beyla.resources | nindent 10 }}
      {{- end }}
      volumes:
      {{- if and .Values.beyla.enabled .Values.beyla.dockerprobe.enabled }}
      # Shared docker metadata volume
      - name: docker-metadata
        emptyDir: {}
      {{- end }}
      # Collector volumes
      - name: cgroup
        hostPath:
          path: /sys/fs/cgroup
      - name: varlog-pods
        hostPath:
          path: /var/log/pods
      - name: docker-containers
        hostPath:
          path: /var/lib/docker/containers
      {{- if .Values.collector.hostMounts.paths }}
      {{- range $index, $path := .Values.collector.hostMounts.paths }}
      - name: hostfs-{{ $index }}
        hostPath:
          path: {{ $path }}
          type: ""
      {{- end }}
      {{- else }}
      - name: hostfs
        hostPath:
          path: /
          type: ""
      {{- end }}
      {{- if .Values.beyla.enabled }}
      # Beyla volumes
      - name: sys-kernel-tracing
        hostPath:
          path: /sys/kernel/tracing
      - name: sys-kernel-debug
        hostPath:
          path: /sys/kernel/debug
      - name: sys-kernel-security
        hostPath:
          path: /sys/kernel/security
      {{- end }}
      {{- with .Values.collector.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.collector.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
